First started working on the project

Started with a base Ubuntu image: 9cd978db300e

Installed packages via apt-get:
     bind9
     bind9-doc
     bind9utils
     build-essential
     mlocate
     unzip
     vim 
     wget
     zip
     
Started to add localhost zone definition per instructions from a book, found out bind9 now ships with a named.conf.default-zones with the following zones pre made:
     “localhost” -> /etc/bind/db.local
     “127.in-addr.arpa” > /etc/bind/db.127
     “0.in-addr.arpa” -> /etc/bind/db.0
     “255.in-addr.arpa” -> /etc/bind/db.255

Committed docker image before beginning work on passed in configuration

Client test(see glossary) # 1successful

Whoops, realized I was mistaken in believing that there was a ‘docker run’ parameter that allowed a single file to be passed.  There is however a ‘-v’ parameter that allows a directory to be mounted as a volume to the container
Syntax: docker run -v <host path>:<container path>
I believe this will be more useful than what I was planning because the user can pass in an entire directory of configs instead of needing a parameter per file:
     Idea: Docker reads in the main config file that can have an ‘include’ directive to allow loading separate files, allowing users to group configurations logically

To handle this behavior, I created a directory in the container to mount these configs to: /opt/dockerDNS/conf

Client test #2 successful
     On the client I created /opt/dockerDNS/conf and touched ‘a’ inside that directory
     running ‘docker run -t -i -v /opt/dockerDNS/conf:/opt/docker/DNS/conf docker.bibliolabs.com:5000/dockerdnsv0.2 /bin/bash’ made ‘a’ accessible from within the  container.

Container self-configuration plan
     -The /etc/bind directory is recursively copied into /tmp
     -Values in the config files that should be dynamically replaced(example: the container’s IP) will originally be represented by placeholders in the config files(i.e. <MY_IP>)
     -The config files in /tmp will be parsed and run through sed to replace these values, then the /tmp config files will be ‘mv’d back into /etc/bind


     -The container will discover its own IP via a parsing of an ‘ip addr’ command and then save it into an environment variable MY_IP avoiding having to recall the command in the future
     Command: 
          $ export MY_IP=`ip addr show dev eth0 | grep ‘inet ‘ | awk {‘print $2’} | see ’s/\/.*//‘`
     -Anywhere the container’s own IP address will be used in a bind config file, we will have the placeholder <MY_IP>
     -The files will be recursively read and run through sed to replace this IP with the actual value
     - I added this command to bash.bashrc to run whenever the container is run with a ‘/bin/bash’ command
     -realized this was a bad move because in most cases, users will just run the container in daemon mode without starting the shell
     -Decided to instead call a script at the beginning of the ‘start’ clause in the /etc/init.d/bind9 to handle all dockerDNS actions
     -Created a /opt/dockerDNS/bin directory to hold all scripts
     -Wrote /opt/dockerDNS/bin/selfConfig.sh (full text of file later)
     -Because shell scripts cannot write variables to their calling environment, instead of using environment variables I will now save the IP address in /opt/dockerDNS/conf/selfConfig with a line like the following:
         MY_IP     192.168.1.2
     -The address can then be accessed elsewhere with:
          cat /opt/dockerDNS/conf/selfConfig | grep MY_IP | awk {‘print $2’}
     
Client test #3 successful
     After starting the bind9 service, /opt/dockerDNS/conf/selfConfig contained eth0’s IP

-Decided to use Ruby as the main language for this project

Installed packages via apt-get:
     aptitude

Ran the following:
$aptitude update
$aptitude install -y ruby1.9.1-full rubygems
$sudo update-alternatives —remove ruby /usr/bin/ruby1.8
$sudo update-alternatives —remove gem /usr/bin/gem1.8
$sudo update-alternatives —remove ri /usr/bin/ri1.8

Wrote a simple ruby script to parse a test file and made this part of the dockerDNS startup script and committed the docker image   

Client test #4 successful
     Ruby parsed the file successfully when the bind9 service was started

-Decided to internally store parsed data from the passed in userConfig(see glossary) as a multilayered 1 by x array where x = number of records.  Each second level array will represent record configurations(name, type of record(A/CNAME), TTL, address) of variable length.  The reason the length should be variable is that bind9 does not strictly require many of the parameters that make up a record definition.  For example, TTL can be omitted and bind9 will replace it with a default value. 

-The userConfig should be a csv.  Whitespace should be allowed for the user’s readability and ignored by my parser script.  

Idea: In a future version, I need a ‘block’ syntax to allow multiline separation of related configurations

-Was able to successfully parse a passed in file(decided to make the default filename for the userConfig ‘userConfig’) with different whitespace use cases.

Client test #5 successful

Record parsing plan:
     Parse each name:
          Each time a new domain is encountered, create a new zone file with a header as well as a new named.conf zone declaration for that domain
          If domain has already been encountered, append the new record to the existing zone file

-Added error checking for name definition, it must be at least 3 sections (i.e. www(1).test(2).com(3) )

Idea: In the future, mid level and top level domains could be declared once and then be appended to all subsequent names that don’t override them

Was able to create zone files from userConfig

This one line in userConfig:
     test.bibliolabs.com., 300, A, 10.2.4.2

Was used to create an entire bibliolabs.com zone file containing that record

Version 1 requirements satisfied

Client test #6 Successful

